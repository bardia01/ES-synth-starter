if(knob1.knobrotation > 3){
    for(int i=0; i<8;i++){
      if((loctave_1 & (1<<i)) != 0){
        count++;
        if(knob2.knobrotation > 4){
          phaseAcc[i] += stepSizes[i] << (knob2.knobrotation - 4 - 1);
        }
        else{
          phaseAcc[i] += stepSizes[i] >> (1 + 4 - knob2.knobrotation);
        }
        Vout[i] = (phaseAcc[i] >> 24); 
        Vout[i] = Vout[i] >> (8 - knob3.knobrotation);
        cVout += Vout[i];
      }
    }
    for(int i=0; i<4;i++){
      if((loctave_2 & (1<<i)) != 0){
        count++; 
        if(knob2.knobrotation > 4){
          phaseAcc[i+8] += stepSizes[i+8] << (knob2.knobrotation - 4 - 1);
        }
        else{
          phaseAcc[i+8] += stepSizes[i+8] >> (1 + 4 - knob2.knobrotation);
        }
        Vout[i+8] = (phaseAcc[i+8] >> 24); 
        Vout[i+8] = Vout[i+8] >> (8 - knob3.knobrotation);
        cVout += Vout[i+8];
      }
    }
  }
  else{
    for(int i=0; i<8;i++){
      if((uoctave_1 & (1<<i)) != 0){ 
        count++; 
        if(knob2.knobrotation > 4){
          phaseAcc[i] += stepSizes[i] << (knob2.knobrotation - 4 + 1);
        }
        else{
          phaseAcc[i] += stepSizes[i] >> (-1 + 4 - knob2.knobrotation);
        }

        int32_t d = (phaseAcc[i] >> 22);
        
        //make table 1024, 
        Vout[i] = (sinwave[d]); 
        Vout[i] = Vout[i] >> (8 - knob3.knobrotation);
        cVout += Vout[i];
      }
    }
    for(int i=0; i<4;i++){
      if((uoctave_2 & (1<<i)) != 0){
        count++; 
        if(knob2.knobrotation > 4){
          phaseAcc[i+8] += stepSizes[i+8] << (knob2.knobrotation - 4 + 1);
        }
        else{
          phaseAcc[i+8] += stepSizes[i+8] >> (-1 + 4 - knob2.knobrotation);
        }
        int32_t d = (phaseAcc[i+8] >> 22);

        Vout[i+8] = (sinwave[d]); 
        Vout[i+8] = Vout[i+8] >> (8 - knob3.knobrotation);
        cVout += Vout[i+8];
      }
    }
    for(int i=0; i<8;i++){
    if((g_keys_pressed_p1 & (1<<i)) != 0){ 
      count++;
      if(knob2.knobrotation > 4){
        phaseAccR[i] += stepSizes[i] << (knob2.knobrotation - 4);
      }
      else{
        phaseAccR[i] += stepSizes[i] >> (4 - knob2.knobrotation);
      }
      Vout[i] = (phaseAccR[i] >> 24); 
      Vout[i] = Vout[i] >> (8 - knob3.knobrotation);
      cVout += Vout[i];
    }
  }
  for(int i=0; i<4;i++){
    if((g_keys_pressed_p2 & (1<<i)) != 0){ 
      count++;
      if(knob2.knobrotation > 4){
        phaseAccR[i+8] += stepSizes[i+8] << (knob2.knobrotation - 4);
      }
      else{
        phaseAccR[i+8] += stepSizes[i+8] >> (4 - knob2.knobrotation);
      }
      Vout[i+8] = (phaseAccR[i+8] >> 24); 
      Vout[i+8] = Vout[i+8] >> (8 - knob3.knobrotation);
      cVout += Vout[i+8];
    }
  }

  }